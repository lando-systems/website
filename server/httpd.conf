# =====================================
# Apache 2.4 config
# - Based on: https://github.com/daniel-ferradal-marquez/single-file-httpd.conf/blob/master/Docker/httpd.conf
# =====================================


Define srv_name    beep-low.com
Define srv_root    /usr/local/apache2
Define doc_root    /usr/local/apache2/htdocs


# =====================================
# Main
# - relative paths are 'relative' to ServerRoot
# =====================================
ServerAdmin        admin@lando.systems
ServerName         ${srv_name}
ServerRoot         ${srv_root}
DocumentRoot       ${doc_root}

PidFile            logs/apache.pid


# =====================================
# Listen directives
# =====================================
Listen 80
Listen 443


# =====================================
# EVENT MPM directives for max 75 concurrent clients
# - MPM: Multi-Processing Module
# - more modern / efficient approach to handling traffic
# =====================================
StartServers            1
ServerLimit             3
MinSpareThreads         5
MaxSpareThreads         70
ThreadsPerChild         25
ThreadLimit             25
MaxRequestWorkers       75
MaxConnectionsperChild  10000000

# ~80% of max load
MaxKeepAliveRequests    100


# =====================================
# Modules
# =====================================
# Core modules
# -------------------------------------
LoadModule unixd_module                modules/mod_unixd.so
LoadModule authz_core_module           modules/mod_authz_core.so
LoadModule log_config_module           modules/mod_log_config.so
LoadModule mime_module                 modules/mod_mime.so


# MPM modules
# -------------------------------------
LoadModule mpm_event_module            modules/mod_mpm_event.so


# Extra functionality modules
# -------------------------------------
LoadModule reqtimeout_module           modules/mod_reqtimeout.so
LoadModule filter_module               modules/mod_filter.so
LoadModule deflate_module              modules/mod_deflate.so
LoadModule headers_module              modules/mod_headers.so
LoadModule allowmethods_module         modules/mod_allowmethods.so
LoadModule http2_module                modules/mod_http2.so
LoadModule rewrite_module              modules/mod_rewrite.so


# Misc functionality modules
# -------------------------------------
LoadModule dir_module                  modules/mod_dir.so
LoadModule alias_module                modules/mod_alias.so
# For directory listing (like 'ls' command), 
# uncomment and set Option Indexes inside appropriate <Directory...> Directive
#LoadModule autoindex_module            modules/mod_autoindex.so


# SSL modules and directives
# -------------------------------------
LoadModule ssl_module                  modules/mod_ssl.so
LoadModule socache_shmcb_module        modules/mod_socache_shmcb.so


# SSL configuration
# -------------------------------------
# - SSLProtocol:         enable all SSL/TLS protocols, except for older ones with known vulnerabilities
# - SSLCipherSuite:      enable a set of cipher suites to be used for SSL/TLS connections
#                        - `ECDHE`: Elliptic Curve Diffie-Hellman Ephemeral - support for "Perfect Forward Secrecy"
# - SSLHonorCipherOrder: use the client's preference when picking the cipher suite
# - SSLSessionTicket:    disable session tickets, can be a vulnerability
# - SSLUseStapling:      allow server to staple a timestamped OCSP response for its cert
#   - makes it so the client doesn't always need to contact the cert authority
# - SSLRandomSeed:       seed the random number gen at startup & on new connection for crypto purposes
# - SSLSessionCache:     create a cache for SSL sessions to improve perf on repeat connections
# -------------------------------------
SSLProtocol             all -SSLv3 -TLSv1 -TLSv1.1
SSLCipherSuite          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
SSLHonorCipherOrder     off
SSLSessionTickets       off
SSLUseStapling          on
SSLStaplingCache        "shmcb:logs/ssl_stapling(32768)"
SSLRandomSeed startup   file:/dev/urandom 2048
SSLRandomSeed connect   file:/dev/urandom 1024
SSLSessionCache         shmcb:${srv_root}/logs/ssl_gcache_data(512000)


# -------------------------------------
# NOTE - Add other modules only as needed
# Find which directive is provided by which module
# via: http://httpd.apache.org/docs/2.4/
# -------------------------------------


# =====================================
# User and Group
# =====================================
User  www-data
Group www-data


# =====================================
# Fine tuning
# -------------------------------------
# - Timeout:          specified in seconds
# - KeepAlive:        enable persistent connections
# - KeepAliveTimeout: specified in seconds
# - UseCanonicalName: use hostname/port supplied by client (vs. the configured ones)
#   - often set to 'off' for proxies that might need to override the configured hostname/port
# - AddOutputFilterByType DEFLATE: set the MIME types that should be compressed via the DEFLATE algorithm
# - Protocols:        supported protocols: h2 = http/2, http/1.1  (who needs consistency when naming protocols anyway?)
# =====================================
Timeout               60
KeepAlive             on
KeepAliveTimeout      10
UseCanonicalName      off
AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css \
                              text/javascript application/javascript
Protocols             h2 http/1.1


# =====================================
# Security directives (top-level)
# -------------------------------------
# - RequestReadTimeout:  set time limits and min data rate for reading client request headers/body (in seconds and bytes per second)
# - ServerTokens:        only send back `Apache` in Server response header, leave out version information for security
# - ServerSignature:     don't include server version and vhost name on server generated pages like error docs
# - HostnameLookups:     disable DNS lookups for client IP addresses (log IPs instead of hostnames), for performance
# - TraceEnable:         disable TRACE HTTP method for security (can be used in cross-site tracing attacks)
# - AccessFileName:      define the name for directory-level config files `.htaccess`
# - Header:              always send specific HTTP headers
#   - X-Frame-Options: SAMEORIGIN - don't allow embeds of our pages in iframes to prevent clickjacking, but do allow our own iframes
#   - X-Content-Type-Options: nosniff - prevent clients from MIME-sniffing response w/out declared content-type to prevent drive-by downloads
# =====================================
RequestReadTimeout    header=20-40,MinRate=500 \
                      body=20,MinRate=500
ServerTokens          prod
ServerSignature       off
HostnameLookups       off
TraceEnable           off
AccessFileName        .htaccess
Header always set     X-Frame-Options SAMEORIGIN
Header always set     X-Content-Type-Options nosniff


# hide .htaccess files (which really shouldn't be used anyway)
<FilesMatch "^\.ht">
    Require all denied
</FilesMatch>

# always deny access to file system
<Directory />
    Options none
    Require all denied
    AllowOverride none
    AllowMethods GET POST HEAD
</Directory>

# allow access to document root
<Directory ${doc_root}>
    AllowOverride none
    Require all granted
</Directory>


# =====================================
# Log directives
# =====================================
LogLevel        warn
LogFormat       "%h %{HTTP_HOST}i %l %u %t [%L] \"%r\" %>s %b"                                     common
LogFormat       "%h %{HTTP_HOST}i %l %u %t [%L] \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\""  combined
ErrorLogFormat  "[%{u}t] [%-m:%l] [%L] [pid %P:tid %T] %7F: %E: [client\ %a] %M% ,\ referer\ %{Referer}i"

# server logs, if vhosts are configured correctly these should always be empty
ErrorLog  logs/error.log
CustomLog logs/access.log common


# =====================================
# Error documents
# =====================================
ErrorDocument 400 "Bad Request"
ErrorDocument 401 "Authorization Required"
ErrorDocument 403 "Forbidden"
ErrorDocument 404 "Not Found"
ErrorDocument 405 "Method Not Allowed"
ErrorDocument 406 "Not Acceptable (encoding)"
ErrorDocument 407 "Proxy Authentication Required"
ErrorDocument 408 "Request Timed Out"
ErrorDocument 409 "Conflicting Request"
ErrorDocument 410 "Gone"
ErrorDocument 411 "Content Length Required"
ErrorDocument 412 "Precondition Failed"
ErrorDocument 413 "Request Entity Too Long"
ErrorDocument 414 "Request URI Too Long"
ErrorDocument 415 "Unsupported Media Type"
ErrorDocument 500 "Internal Server Error"
ErrorDocument 501 "Not Implemented"
ErrorDocument 502 "Bad Gateway"
ErrorDocument 503 "Service Unavailable"
ErrorDocument 504 "Gateway Timeout"
ErrorDocument 505 "HTTP Version Not Supported"


# =====================================
# MIME type configuration
# =====================================
TypesConfig    conf/mime.types



# =====================================
# Data transfer configuration
# -------------------------------------
# NOTE: these settings aren't necessarily compatible with network filesystems or other special cases
#
# - EnableMMAP:      allow use of memory-mapped files for file delivery for efficiency
# - EnableSendfile:  allow use of kernel `sendfile()` to serve static files for efficiency
# =====================================
EnableMMAP      on
EnableSendfile  on



# =====================================
# Virtual Hosts
# =====================================

# Default - non-ssl
# -------------------------------------
<VirtualHost *:80>
    DocumentRoot   ${doc_root}
    ServerName     ${srv_name}
    ServerAlias    www.${srv_name}

    ErrorLog       logs/${srv_name}-error.log
    CustomLog      logs/${srv_name}.log common

    # redirect all requests to the SSL vhost,
    # but always allow requests to .well-known/
    # for let's encrypt cert renewal challenge
    # ---------------------------------
    RewriteEngine  on

    # if the request path doesn't start with `.well-known`...
    RewriteCond    %{REQUEST_URI} !^/\.well-known/

    # then rewrite the whole request (^) from http to https and apply options:
    # - [L    ]:  'L'ast rule to be applied, if it matches
    # - [R=301]:  'R'edirect with an HTTP 301 (Moved Permanently) response
    RewriteRule    ^ https://%{SERVER_NAME}%{REQUEST_URI} [L,R=301]

    # always allow non-ssl access to `.well-known` and children
    <Directory ${doc_root}/.well-known>
        Require all granted
    </Directory>
</VirtualHost>


# SSL/TLS
# -------------------------------------
<VirtualHost *:443>
    DocumentRoot   ${doc_root}
    ServerName     ${srv_name}
    ServerAlias    www.${srv_name}

    ErrorLog       logs/${srv_name}-ssl-error.log
    CustomLog      logs/${srv_name}-ssl.log combined

    # SSL/TLS cert and key
    #  - mapped to these locations via `compose.yaml` volume mappings
    SSLEngine                on
    SSLCertificateFile       conf/server.crt
    SSLCertificateKeyFile    conf/server.key

    # Site content
    DirectoryIndex index.html
    <Directory ${doc_root}>
        Require all granted
    </Directory>
</VirtualHost>
